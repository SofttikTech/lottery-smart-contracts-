
// SPDX-License-Identifier: LICENSED
pragma solidity >=0.5.0 <0.9.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v3.x/contracts/math/SafeMath.sol";
import 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/docs-v3.x/contracts/token/ERC20/IERC20.sol';

import "./UnitedWorldToken.sol";



contract LotterySimpleRandom {

    using SafeMath for uint256;
    
     enum LOTTERY_STATE {OPEN, CLOSED, COMPLETED}
    LOTTERY_STATE public lottery_state;
    
    IERC20 public token;


    uint256 public totalTickets;
    uint256 public ticketPrice;
    
    
    address public admin;
    uint256 public lotteryId = 1;

    
    struct Lottery {
        // uint256 lotteryId;
        uint256 totalTickets;
        uint256  minTickets;
        uint256  maxTickets;
        uint256 ticketPrice;
        bool lotteryStatus;
        address payable[] participatingPlayers;
        address payable winner;
    }
    
    address payable[] totalEnteriesPerPlayer;
    
    mapping(uint256 => Lottery) public lotteries;
    mapping(address => uint256) public contributions;
    mapping(address => uint256) public playerIdsByAddress;
    
    
    event Winner(
        uint256 lotteryId,
        uint256 _randomness,
        uint256 _index,
        uint256 _amount
    );

    
    modifier onlyAdmin() {
        require(msg.sender == admin, "Not authorized Person");
        _;
    }

    constructor(
        IERC20 _token
        ) public payable {
            

        admin = msg.sender;
        token = _token;
        // require(_minTicketsPlayerBuy == 1, "you have to buy minimum of 1 ticket");
       
        
    }


    //this should start the lottery
    function startLottery() public {
        require(lottery_state == LOTTERY_STATE.CLOSED,"can't start a new lottery in this stage");
        require(msg.sender == admin);
        lottery_state = LOTTERY_STATE.OPEN;
    }
    
    
    
    function createLottery( uint256 _ticketPrice, uint256 _totalTickets)  public {
        address payable[] memory _participatingPlayers;
        address payable _winner;
        uint256 _minTickets = 1;
        
        require(msg.sender == admin, "only admin can create lottery");    
        require( lottery_state == LOTTERY_STATE.OPEN, "can't create lottery at this stage");
        
        Lottery storage lottery = lotteries[lotteryId];
        
        lotteries[lotteryId] = Lottery(_totalTickets, _minTickets, lottery.maxTickets ,_ticketPrice, true, _participatingPlayers, _winner);
        lottery.minTickets = _minTickets;
        lottery.maxTickets = _totalTickets * 25 / 100;
        totalTickets = _totalTickets;
        lottery_state = LOTTERY_STATE.CLOSED;
        lotteryId = lotteryId.add(1);
        ticketPrice = lottery.ticketPrice;
        
        
        }
    
        
    // uint _ticketAmount
    
    
    function buyTicket(uint256 _lotteryId, uint _ticketAmount) public payable {

        require(_lotteryId >= 1, "this lottery is not available");
        require(lottery_state == LOTTERY_STATE.OPEN,"can't start a new lottery in this stage");
        require(msg.sender != admin, "only users can call function");
        
        Lottery storage lottery = lotteries[_lotteryId];
        // ticketPrice = lottery.ticketPrice; i stored lottery.ticketprice in ticketPrice variable 
        require(_ticketAmount == lottery.ticketPrice, "Error on Ticket Price");
        require(lottery.lotteryStatus == true, "Error on Lottery status");
        
        uint256 _existingContribution = contributions[msg.sender];
        uint256 _newContribution = _existingContribution.add(1);
        
        require(_newContribution >= lottery.minTickets, "LotterySimpleRandom: new contribution is less than min tickets player will buy"); 
        require(_newContribution <= lottery.maxTickets, "LotterySimpleRandom: new contribution is higher than maximum ticket for one player");
        
        
        require(lottery.participatingPlayers.length  < totalTickets, "LotterySimpleRandom: Participating player length should be less than or equal to totalTickets");

        token.transferFrom(msg.sender, address(this), _ticketAmount);
        contributions[msg.sender] = _newContribution;
        lottery.participatingPlayers.push(msg.sender);
        
    }



    function getrandom(uint256 _lotteryId) public view returns (uint256) {
        Lottery storage lottery = lotteries[_lotteryId];
        return uint256(keccak256(abi.encodePacked(block.difficulty,block.timestamp,lottery.participatingPlayers.length)));
    }


    function pickWinnerandresetLottery(uint256 _lotteryId) public payable {
        
        
        require(msg.sender == admin, "admin can call");
        require(lottery_state == LOTTERY_STATE.OPEN,"You aren't at that stage yet!");
        
        uint256 randNumber = getrandom(_lotteryId);
        require(randNumber > 0, "random-not-found");


        Lottery storage lottery = lotteries[_lotteryId];
        require(lottery.participatingPlayers.length == totalTickets, "error here");
    
        uint256 index = randNumber % lottery.participatingPlayers.length;
        lottery.winner = lottery.participatingPlayers[index];

        //fee method
        uint256 adminFee = (token.balanceOf(address(this)) * 10) / 100;
        uint256 winnerPrize = (token.balanceOf(address(this)) * 90) / 100;
    
        uint256 allowance = token.allowance(lottery.winner, address(this));
        require(allowance >= winnerPrize, "Check the token allowance");
        
        token.transfer(lottery.winner, winnerPrize);
        token.transfer(admin, adminFee);
        
        emit Winner(lotteryId, randNumber, index, winnerPrize);
        // resetLottery(lottery);
    
        
    }




    function resetLottery(Lottery storage lottery) internal {
        
        lottery.participatingPlayers = new address payable[](0);
        lottery.lotteryStatus = false;
        lottery_state = LOTTERY_STATE.CLOSED;
        totalTickets = 0;
        lottery.winner = address(0);
    }

    
    function getPlayers(uint256 _lotteryId) public view returns (address payable[] memory) {
        return lotteries[_lotteryId].participatingPlayers;
    }

    
    function getWinner(uint256 _lotteryId) public view returns (address)
    {
        return lotteries[_lotteryId].winner;
    }

    
    function getStatus(uint256 _lotteryId) public view returns (bool) {
        return lotteries[_lotteryId].lotteryStatus;
    }


    function getLotteryTicketPrice(uint256 _lotteryId) public view
        returns (uint256)
    {
        return lotteries[_lotteryId].ticketPrice;
    }
    
}